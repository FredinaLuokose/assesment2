<odoo>
    <data>

        <!-- Define the form view for the Create Invoice wizard -->
        <record id="view_create_invoice_wizard" model="ir.ui.view">
            <field name="name">create.invoice.wizard.form</field>
            <field name="model">create.invoice.wizard</field>
            <field name="arch" type="xml">
                <form string="Create Invoice">
                    <group>
                        <field name="journal_id" />
                        <field name="invoice_date" />
                    </group>
                    <footer>
                        <button string="Submit" type="object" name="action_create_invoice" class="btn-primary" />
                        <button string="Cancel" class="btn-secondary" special="cancel" />
                    </footer>
                </form>
            </field>
        </record>

        <!-- Inherit the existing stock.picking.form view to add the Create Invoice button -->
        <record id="stock_picking_form_inherit_open_invoice_wizard" model="ir.ui.view">
            <field name="name">stock.picking.form.inherit.open.invoice.wizard</field>
            <field name="model">stock.picking</field>
            <field name="inherit_id" ref="stock.view_picking_form"/>
            <field name="arch" type="xml">
                <xpath expr="//header" position="inside">
                    <button name="open_invoice_wizard"
                            type="object"
                            string="Create Invoice"
                            class="btn-primary"
                            context="{'default_picking_id': id}"/>
                </xpath>
            </field>
        </record>

        <!-- Action to open the Create Invoice wizard -->
        <record id="action_create_invoice_wizard" model="ir.actions.act_window">
            <field name="name">Create Invoice</field>
            <field name="res_model">create.invoice.wizard</field>
            <field name="view_mode">form</field>
            <field name="target">new</field>
        </record>

        <!-- Server action to trigger the wizard -->
        <record id="method_open_invoice_wizard" model="ir.actions.server">
            <field name="name">open_invoice_wizard</field>
            <field name="model_id" ref="stock.model_stock_picking"/>
            <field name="state">code</field>
            <field name="code">
                action = env.ref('assesment_task.action_create_invoice_wizard').read()[0]
            </field>
        </record>

    </data>
</odoo>
  from odoo import models, fields, api


class CreateInvoiceWizard(models.TransientModel):
    _name = 'create.invoice.wizard'
    _description = 'Create Invoice Wizard'

    journal_id = fields.Many2one('account.journal', string='Journal', required=True)
    invoice_date = fields.Date(string='Invoice Date', required=True)

    def action_create_invoice(self):
        invoice_obj = self.env['account.move']
        picking = self.env['stock.picking'].browse(self._context.get('default_picking_id'))

        # Retrieve the sale order and customer from the picking
        if picking.sale_id:
            sale_order = picking.sale_id
            customer = sale_order.partner_id
        else:
            customer = picking.partner_id

        # Prepare the invoice lines from the sale order lines
        invoice_lines = []
        if sale_order:
            for line in sale_order.order_line:
                invoice_lines.append((0, 0, {
                    'product_id': line.product_id.id,
                    'quantity': line.product_uom_qty,
                    'price_unit': line.price_unit,
                    'tax_ids': [(6, 0, line.tax_id.ids)],
                    'name': line.name,
                    'account_id': line.product_id.categ_id.property_account_income_categ_id.id,
                    # Ensure correct account
                }))

        # Create and post the invoice
        for record in self:
            invoice = invoice_obj.create({
                'journal_id': record.journal_id.id,
                'invoice_date': record.invoice_date,
                'move_type': 'out_invoice',
                'partner_id': customer.id,
                'invoice_line_ids': invoice_lines,  # Add the lines to the invoice
            })

            # Post the invoice to validate it
            invoice.action_post()

        return {'type': 'ir.actions.act_window_close'}  # Close the wizard after posting the invoice


class StockPicking(models.Model):
    _inherit = 'stock.picking'

    def open_invoice_wizard(self):
        return {
            'type': 'ir.actions.act_window',
            'name': 'Create Invoice',
            'res_model': 'create.invoice.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_picking_id': self.id},  # Pass the current picking id to the wizard
        }
